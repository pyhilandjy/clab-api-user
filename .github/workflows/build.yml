name: Build and Deploy User API

on:
  push:
    branches:
      - main
      - dev

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: connects-lab/talk.d_api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "TAG=latest" >> $GITHUB_ENV
            echo "EC2_HOST=${{ secrets.EC2_HOST_PROD }}" >> $GITHUB_ENV
            echo "SG_ID=${{ secrets.SG_ID_PROD }}" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
            echo "TAG=dev" >> $GITHUB_ENV
            echo "EC2_HOST=${{ secrets.EC2_HOST_DEV }}" >> $GITHUB_ENV
            echo "SG_ID=${{ secrets.SG_ID_DEV }}" >> $GITHUB_ENV
          fi

      - name: Debug Print (Check ENV Values)
        run: |
          echo "ENV=${ENV}"
          echo "TAG=${TAG}"
          echo "EC2_HOST=${EC2_HOST}"
          echo "SG_ID=${SG_ID}"
        env:
          ENV: ${{ env.ENV }}
          TAG: ${{ env.TAG }}
          EC2_HOST: ${{ env.EC2_HOST }}
          SG_ID: ${{ env.SG_ID }}

      - name: Login to Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/${{ env.IMAGE_NAME }}:${{ env.TAG }} .
          docker push ghcr.io/${{ env.IMAGE_NAME }}:${{ env.TAG }}

      - name: Add SSH inbound rule
        run: |
          echo "Add SSH Rule for SG_ID=${SG_ID}"
          aws ec2 authorize-security-group-ingress \
            --group-id ${SG_ID} \
            --protocol tcp \
            --port 22 \
            --cidr $(curl -s https://checkip.amazonaws.com)/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2
        run: |
          echo "${SSH_PRIVATE_KEY}" > SSH_PRIVATE_KEY.pem
          chmod 600 SSH_PRIVATE_KEY.pem
          echo "Deploy to ${EC2_HOST} with tag ${TAG} and env ${ENV}"

          ssh -i SSH_PRIVATE_KEY.pem -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} << EOF
            cd clab
            docker pull ghcr.io/${{ env.IMAGE_NAME }}:${TAG}
            TAG=${TAG} ENV=${ENV} docker compose down
            TAG=${TAG} ENV=${ENV} docker compose up -d --build
          EOF

          rm -f SSH_PRIVATE_KEY.pem
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ env.EC2_HOST }}
          TAG: ${{ env.TAG }}
          ENV: ${{ env.ENV }}

      - name: Remove SSH inbound rule
        run: |
          echo "Remove SSH Rule for SG_ID=${SG_ID}"
          aws ec2 revoke-security-group-ingress \
            --group-id ${SG_ID} \
            --protocol tcp \
            --port 22 \
            --cidr $(curl -s https://checkip.amazonaws.com)/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
